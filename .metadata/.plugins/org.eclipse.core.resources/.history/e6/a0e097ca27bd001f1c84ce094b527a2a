package testTree;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class BinaryTree extends Tree {

    public BinaryTree() {
        super();
    }

    @Override
    public void createTree(int value) {
        this.root = new Node(value);
    }

    @Override
    public void insertNode(Node parent, int value) {
        if (parent != null) {
            if (parent.getChildren().size() < 2) {
                Node newNode = new Node(value);
                parent.addChild(newNode);
            } else {
                System.out.println("A binary node can have only two children.");
            }
        }
    }

    @Override
    public void deleteNode(int value) {
        Node deleteNode = search(value);
        if (deleteNode != null) {
            deleteNode.removeSelf();
        }
    }

    @Override
    public void updateNode(int oldValue, int newValue) {
        Node nodeToUpdate = search(oldValue);
        if (nodeToUpdate != null) {
            nodeToUpdate.setValue(newValue);
        }
    }

    @Override
    public Node search(int value) {
        if (root == null) {
            return null;
        }
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            Node current = queue.poll(); // Phần tử đầu tiên trong queue

            if (current.getValue() == value) {
                return current;
            }

            for (Node child : current.getChildren()) {
                queue.add(child);
            }
        }
        return null;
    }

    @Override
    public List<Node> traverse(String algorithm) {
        if (algorithm.equalsIgnoreCase("DFS")) {
            return traverseDFS();
        } else if (algorithm.equalsIgnoreCase("BFS")) {
            return traverseBFS();
        }
        return new LinkedList<>();
    }

    // Duyệt DFS
    public List<Node> traverseDFS() {
        List<Node> result = new LinkedList<>();
        if (root != null) {
            traverseDFSRecursive(root, result);
        }
        return result;
    }

    private void traverseDFSRecursive(Node current, List<Node> result) {
        result.add(current); // Thêm node hiện tại vào kết quả

        for (Node child : current.getChildren()) {
            traverseDFSRecursive(child, result); // Duyệt tiếp các node con
        }
    }

    // Duyệt BFS
    public List<Node> traverseBFS() {
        List<Node> result = new LinkedList<>();
        if (root != null) {
            Queue<Node> queue = new LinkedList<>();
            queue.add(root);

            while (!queue.isEmpty()) {
                Node current = queue.poll();
                result.add(current); // Thêm giá trị của node vào kết quả

                // Thêm tất cả các con vào queue
                for (Node child : current.getChildren()) {
                    queue.add(child);
                }
            }
        }
        return result;
    }

    // Phương thức main để kiểm tra
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.createTree(1);  // Tạo cây với root có giá trị 1

        Node root = tree.getRoot();
        tree.insertNode(root, 2);  // Thêm node 2 vào root
        tree.insertNode(root, 3);  // Thêm node 3 vào root
        Node node2 = root.getChildren().get(0);
        tree.insertNode(node2, 4);  // Thêm node 4 vào node 2

        // Duyệt cây theo DFS và BFS
        System.out.println("DFS Traversal:");
        for (Node node : tree.traverse("DFS")) {
            System.out.print(node.getValue() + " ");
        }
        System.out.println("\nBFS Traversal:");
        for (Node node : tree.traverse("BFS")) {
            System.out.print(node.getValue() + " ");
        }

        // Cập nhật node
        tree.updateNode(2, 5);
        System.out.println("\nAfter updating node 2 to 5:");
        for (Node node : tree.traverse("BFS")) {
            System.out.print(node.getValue() + " ");
        }

        // Xóa node
        tree.deleteNode(5);
        System.out.println("\nAfter deleting node 5:");
        for (Node node : tree.traverse("BFS")) {
            System.out.print(node.getValue() + " ");
        }
    }
}

